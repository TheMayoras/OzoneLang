/*
 * This file is part of Ozone.
 *
 * Ozone is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Ozone is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Ozone.  If not, see <https://www.gnu.org/licenses/>.
 */

// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/ozone.jflex

/*
 * Grammar spec for the Ozone Programming language.
 * Author: Valio Valtokari
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     <http://www.apache.org/licenses/LICENSE-2.0>
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ozonelang.ozone.core.lexer;

import java.util.List;
import java.util.ArrayList;
import java.io.IOException;

import ozonelang.ozone.core.runtime.exception.OzoneException;
import ozonelang.ozone.core.runtime.exception.StackTrace;

import static ozonelang.ozone.core.runtime.exception.OzoneException.raiseEx;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  private static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  private static final int YYINITIAL = 0;
  private static final int STRING = 2;
  private static final int SINGLE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\1\7\2\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\0\1\15\1\16\1\17\1\20\11\21"+
    "\1\22\2\0\1\23\2\0\1\24\13\25\1\26\6\25"+
    "\1\27\7\25\1\30\1\31\1\32\1\33\1\25\1\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\25\1\45\1\46\1\47\1\50\1\51\2\25"+
    "\1\52\1\53\1\54\1\55\1\25\1\56\1\25\1\57"+
    "\1\25\1\60\1\0\1\61\106\0\2\25\20\0\1\25"+
    "\15\0\2\25\20\0\1\25\u0109\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\11\23"+
    "\1\27\1\30\1\31\1\32\1\33\1\31\1\33\1\34"+
    "\1\35\1\36\2\37\4\0\1\40\1\41\1\42\1\43"+
    "\4\23\1\44\1\45\1\46\1\23\1\47\3\23\1\50"+
    "\1\51\1\52\1\53\1\54\2\35\1\55\4\0\5\23"+
    "\1\56\1\23\1\57\1\23\1\47\1\0\1\35\1\60"+
    "\1\23\1\61\1\62\1\63\1\23\1\64\1\65\2\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\226\0\310\0\372\0\226"+
    "\0\u012c\0\226\0\226\0\226\0\226\0\226\0\226\0\226"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\226\0\u028a"+
    "\0\226\0\226\0\226\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384"+
    "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\226\0\226\0\u047e\0\226"+
    "\0\u04b0\0\u04e2\0\u0514\0\226\0\u0546\0\u0578\0\226\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u01c2\0\226\0\226\0\226\0\226"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u028a\0\u028a\0\u028a\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\226\0\226\0\226\0\226"+
    "\0\226\0\226\0\u0834\0\u0640\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u028a\0\u0a28\0\u028a"+
    "\0\u0a5a\0\u028a\0\u0a8c\0\u060e\0\u028a\0\u0abe\0\u028a\0\u028a"+
    "\0\u028a\0\u0af0\0\u028a\0\u028a\0\u0b22\0\u0b54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\3\30\1\31\1\4\1\32"+
    "\1\33\1\30\1\34\2\30\1\35\1\36\2\30\1\37"+
    "\2\30\1\40\1\41\4\30\1\42\1\43\1\44\1\45"+
    "\1\46\2\47\2\4\1\47\1\50\23\47\1\51\30\47"+
    "\2\52\2\4\4\52\1\50\20\52\1\53\30\52\64\0"+
    "\1\5\102\0\1\54\42\0\1\55\73\0\1\56\1\0"+
    "\1\57\1\60\53\0\1\61\1\62\2\0\1\55\60\0"+
    "\1\63\1\0\2\64\4\0\1\65\1\66\16\0\1\65"+
    "\4\0\1\66\24\0\1\63\1\0\2\24\4\0\1\65"+
    "\1\66\16\0\1\65\4\0\1\66\30\0\1\67\62\0"+
    "\1\70\56\0\2\30\3\0\3\30\4\0\24\30\22\0"+
    "\2\30\3\0\3\30\4\0\15\30\1\71\1\72\5\30"+
    "\22\0\2\30\3\0\3\30\4\0\12\30\1\73\11\30"+
    "\22\0\2\30\3\0\3\30\4\0\21\30\1\74\2\30"+
    "\22\0\2\30\3\0\3\30\4\0\5\30\1\75\6\30"+
    "\1\76\2\30\1\77\4\30\22\0\2\30\3\0\3\30"+
    "\4\0\15\30\1\100\6\30\22\0\2\30\3\0\3\30"+
    "\4\0\15\30\1\101\6\30\22\0\2\30\3\0\3\30"+
    "\4\0\17\30\1\102\4\30\22\0\2\30\3\0\3\30"+
    "\4\0\7\30\1\103\14\30\22\0\2\30\3\0\3\30"+
    "\4\0\4\30\1\104\17\30\2\0\2\47\2\0\1\47"+
    "\1\0\23\47\1\0\30\47\5\0\1\105\42\0\1\106"+
    "\1\0\1\107\1\0\1\110\5\0\2\52\2\0\4\52"+
    "\1\0\20\52\1\0\30\52\10\0\1\111\37\0\1\106"+
    "\1\0\1\107\1\0\1\110\5\0\2\55\1\112\1\113"+
    "\56\55\16\0\1\114\1\0\1\57\1\60\60\0\2\60"+
    "\40\0\13\115\1\116\46\115\13\62\1\117\1\120\45\62"+
    "\16\0\1\63\1\0\1\57\1\60\60\0\2\30\3\0"+
    "\3\30\4\0\15\30\1\121\6\30\22\0\2\30\3\0"+
    "\3\30\4\0\4\30\1\122\17\30\22\0\2\30\3\0"+
    "\3\30\4\0\10\30\1\123\6\30\1\124\4\30\22\0"+
    "\2\30\3\0\3\30\4\0\14\30\1\125\7\30\22\0"+
    "\2\30\3\0\3\30\4\0\3\30\1\126\20\30\22\0"+
    "\2\30\3\0\3\30\4\0\20\30\1\127\3\30\22\0"+
    "\2\30\3\0\3\30\4\0\4\30\1\130\17\30\22\0"+
    "\2\30\3\0\3\30\4\0\4\30\1\131\17\30\22\0"+
    "\2\30\3\0\3\30\4\0\17\30\1\132\4\30\4\0"+
    "\1\112\57\0\13\115\1\133\46\115\13\0\1\116\3\0"+
    "\1\112\42\0\13\62\1\117\3\62\1\0\55\62\1\117"+
    "\1\120\2\62\1\134\42\62\20\0\2\30\3\0\3\30"+
    "\4\0\12\30\1\135\11\30\22\0\2\30\3\0\3\30"+
    "\4\0\1\136\23\30\22\0\2\30\3\0\3\30\4\0"+
    "\5\30\1\137\16\30\22\0\2\30\3\0\3\30\4\0"+
    "\4\30\1\140\17\30\22\0\2\30\3\0\3\30\4\0"+
    "\2\30\1\141\21\30\22\0\2\30\3\0\3\30\4\0"+
    "\7\30\1\142\14\30\22\0\2\30\3\0\3\30\4\0"+
    "\14\30\1\143\7\30\2\0\13\115\1\133\3\115\1\112"+
    "\42\115\20\0\2\30\3\0\3\30\4\0\11\30\1\144"+
    "\12\30\22\0\2\30\3\0\3\30\4\0\10\30\1\145"+
    "\13\30\22\0\2\30\3\0\3\30\4\0\14\30\1\146"+
    "\7\30\22\0\2\30\3\0\3\30\4\0\6\30\1\132"+
    "\15\30\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\1\1\7\11\6\1\1\11"+
    "\1\1\3\11\11\1\2\11\1\1\1\11\3\1\1\11"+
    "\2\1\1\11\1\1\4\0\4\11\14\1\6\11\2\1"+
    "\4\0\12\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public final String file;

    StringBuilder string = new StringBuilder();

    private Token makeToken(SymbolType sym, Object value) {
        return new Token(file, sym, value, getLine(), getColumn());
    }

    private Token makeToken(SymbolType sym) {
        return new Token(file, sym, getLine(), getColumn());
    }

    public String getFile() {
        return file;
    }

    public int getLine() {
        return yyline;
    }

    public int getColumn() {
        return yycolumn;
    }

    public Token next() throws IOException {
        return yylex();
    }

    public boolean hasNext() {
        return !yyatEOF();
    }

    public List<Token> lex() throws IOException {
        List<Token> tokens = new ArrayList<>();
        while (hasNext()) {
            tokens.add(yylex());
        }
        return tokens;
    }

    private Token lexBool() {
        switch (yytext()) {
            case "yes":
                return makeToken(SymbolType.YES);
            case "no":
                return makeToken(SymbolType.NO);
            case "nothing":
                return makeToken(SymbolType.NOTHING);
        }
        return new Token("", SymbolType.NOTHING, 0, 0);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in, String file) {
      this.file = file;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  private final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  private final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  private final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  private Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              raiseEx(new ParsingError("unexpected EOF in middle of a string literal",
                                        this.file, yytext(), getLine(), getColumn()), true, new Context(file, yytext(),
                                        getLine(), getLine(), getColumn(), getColumn()));
            }  // fall though
            case 103: break;
            case SINGLE_STRING: {
              raiseEx(new ParsingError("unexpected EOF in middle of a string literal",
                                        this.file, yytext(), getLine(), getColumn()), true, new Context(file, yytext(),
                                        getLine(), getLine(), getColumn(), getColumn()));
            }  // fall though
            case 104: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new ParsingError(this.file, yytext(), getLine(), getColumn());
            }
            // fall through
          case 54: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 55: break;
          case 3:
            { return makeToken(SymbolType.NOT);
            }
            // fall through
          case 56: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 57: break;
          case 5:
            { return makeToken(SymbolType.HASHTAG);
            }
            // fall through
          case 58: break;
          case 6:
            { return makeToken(SymbolType.VAR);
            }
            // fall through
          case 59: break;
          case 7:
            { string.setLength(0); yybegin(SINGLE_STRING);
            }
            // fall through
          case 60: break;
          case 8:
            { return makeToken(SymbolType.LPAREN);
            }
            // fall through
          case 61: break;
          case 9:
            { return makeToken(SymbolType.RPAREN);
            }
            // fall through
          case 62: break;
          case 10:
            { return makeToken(SymbolType.MUL);
            }
            // fall through
          case 63: break;
          case 11:
            { return makeToken(SymbolType.PLUS);
            }
            // fall through
          case 64: break;
          case 12:
            { return makeToken(SymbolType.MINUS);
            }
            // fall through
          case 65: break;
          case 13:
            { return makeToken(SymbolType.DOT);
            }
            // fall through
          case 66: break;
          case 14:
            { return makeToken(SymbolType.DIV);
            }
            // fall through
          case 67: break;
          case 15:
            { return makeToken(SymbolType.INTEGER_LITERAL, yytext());
            }
            // fall through
          case 68: break;
          case 16:
            { return makeToken(SymbolType.COLON);
            }
            // fall through
          case 69: break;
          case 17:
            { return makeToken(SymbolType.ASSIGN);
            }
            // fall through
          case 70: break;
          case 18:
            { return makeToken(SymbolType.AT);
            }
            // fall through
          case 71: break;
          case 19:
            { return makeToken(SymbolType.IDENTIFIER, yytext());
            }
            // fall through
          case 72: break;
          case 20:
            { return makeToken(SymbolType.SQ_BRACET_L);
            }
            // fall through
          case 73: break;
          case 21:
            { return makeToken(SymbolType.SQ_BRACET_R);
            }
            // fall through
          case 74: break;
          case 22:
            { return makeToken(SymbolType.POW);
            }
            // fall through
          case 75: break;
          case 23:
            { return makeToken(SymbolType.LBRACE);
            }
            // fall through
          case 76: break;
          case 24:
            { return makeToken(SymbolType.RBRACE);
            }
            // fall through
          case 77: break;
          case 25:
            { string.append( yytext() );
            }
            // fall through
          case 78: break;
          case 26:
            { yybegin(YYINITIAL); return makeToken(SymbolType.STRING_LITERAL, string.toString());
            }
            // fall through
          case 79: break;
          case 27:
            { string.append('\\');
            }
            // fall through
          case 80: break;
          case 28:
            { return makeToken(SymbolType.NOTEQ);
            }
            // fall through
          case 81: break;
          case 29:
            { /* ignore safely */
            }
            // fall through
          case 82: break;
          case 30:
            { return makeToken(SymbolType.CONCAT_SPACE);
            }
            // fall through
          case 83: break;
          case 31:
            { return makeToken(SymbolType.FLOAT_LITERAL, yytext());
            }
            // fall through
          case 84: break;
          case 32:
            { return makeToken(SymbolType.LONG_LITERAL, yytext());
            }
            // fall through
          case 85: break;
          case 33:
            { return makeToken(SymbolType.SHORT_LITERAL, yytext());
            }
            // fall through
          case 86: break;
          case 34:
            { return makeToken(SymbolType.MODULE_SEPARATOR);
            }
            // fall through
          case 87: break;
          case 35:
            { return makeToken(SymbolType.EQ);
            }
            // fall through
          case 88: break;
          case 36:
            { return makeToken(SymbolType.IF);
            }
            // fall through
          case 89: break;
          case 37:
            { return makeToken(SymbolType.IN);
            }
            // fall through
          case 90: break;
          case 38:
            { return makeToken(SymbolType.IS);
            }
            // fall through
          case 91: break;
          case 39:
            { return lexBool();
            }
            // fall through
          case 92: break;
          case 40:
            { string.append('\"');
            }
            // fall through
          case 93: break;
          case 41:
            { string.append('\n');
            }
            // fall through
          case 94: break;
          case 42:
            { string.append('\r');
            }
            // fall through
          case 95: break;
          case 43:
            { string.append('\t');
            }
            // fall through
          case 96: break;
          case 44:
            { string.append('\'');
            }
            // fall through
          case 97: break;
          case 45:
            { return makeToken(SymbolType.CONCAT_COMMA);
            }
            // fall through
          case 98: break;
          case 46:
            { return makeToken(SymbolType.MOD);
            }
            // fall through
          case 99: break;
          case 47:
            { return makeToken(SymbolType.USE);
            }
            // fall through
          case 100: break;
          case 48:
            { return makeToken(SymbolType.BOOL);
            }
            // fall through
          case 101: break;
          case 49:
            { return makeToken(SymbolType.ELIF);
            }
            // fall through
          case 102: break;
          case 50:
            { return makeToken(SymbolType.ELSE);
            }
            // fall through
          case 103: break;
          case 51:
            { return makeToken(SymbolType.FUNC);
            }
            // fall through
          case 104: break;
          case 52:
            { return makeToken(SymbolType.WHEN);
            }
            // fall through
          case 105: break;
          case 53:
            { return makeToken(SymbolType.BREAK);
            }
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
